// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`connect actions and rename 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {
        firstAction: (name: string) => ({
            type: \\"first action (logic)\\";
            payload: {
                name: string;
            };
        });
        secondAction: (otherName: string) => ({
            type: \\"second action (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: any;
    actions: {
        firstAction: (name: string) => ({
            type: \\"first action (logic)\\";
            payload: {
                name: string;
            };
        });
        secondAction: (otherName: string) => ({
            type: \\"second action (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    values: {};
    _isKea: true;
}"
`;

exports[`connect actions from another logic 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: any;
    actions: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    values: {};
    _isKea: true;
}"
`;

exports[`connect actions from multiple other logics 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: any;
    actions: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    values: {};
    _isKea: true;
}"
`;

exports[`connect props from another logic 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {};
    actionKeys: any;
    actions: {};
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {
        name: (state: any, props: any) => string;
        yetAnotherNameWithNullDefault: (state: any, props: any) => string | null;
    };
    values: {
        name: string;
        yetAnotherNameWithNullDefault: string | null;
    };
    _isKea: true;
}"
`;

exports[`connect values and rename 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {};
    actionKeys: any;
    actions: {};
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {
        firstSelector: (state: any, props: any) => string;
        secondSelector: (state: any, props: any) => string | null;
    };
    values: {
        firstSelector: string;
        secondSelector: string | null;
    };
    _isKea: true;
}"
`;

exports[`connect values from another logic 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {};
    actionKeys: any;
    actions: {};
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {
        name: (state: any, props: any) => string;
        yetAnotherNameWithNullDefault: (state: any, props: any) => string | null;
    };
    values: {
        name: string;
        yetAnotherNameWithNullDefault: string | null;
    };
    _isKea: true;
}"
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`actions - as a function returning a object 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: { otherName: string; };
        });
    };
    actionKeys: Record<string, any>;
    actionTypes: Record<string, any>;
    actions: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: { otherName: string; };
        });
    };
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    values: {};
    _isKea: true;
}"
`;

exports[`actions - as an object 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: { otherName: string; };
        });
    };
    actionKeys: Record<string, any>;
    actionTypes: Record<string, any>;
    actions: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: { otherName: string; };
        });
    };
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    values: {};
    _isKea: true;
}"
`;

exports[`actions - with a function 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: { otherName: string; };
        });
    };
    actionKeys: Record<string, any>;
    actionTypes: Record<string, any>;
    actions: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: { otherName: string; };
        });
    };
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    values: {};
    _isKea: true;
}"
`;

exports[`actions - with random values instead of functions 1`] = `
"export interface logicType {
    key: any;
    actionCreators: {
        updateName: (name?: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        withDefaultValue: (name?: any) => ({
            type: \\"with default value (logic)\\";
            payload: { name: string; };
        });
        withDefaultValueAndType: (name?: string) => ({
            type: \\"with default value and type (logic)\\";
            payload: { name: string; };
        });
        withBool: () => ({
            type: \\"with bool (logic)\\";
            payload: {
                value: boolean;
            };
        });
        withRandomPayload: () => ({
            type: \\"with random payload (logic)\\";
            payload: {
                value: { bla: number; };
            };
        });
    };
    actionKeys: Record<string, any>;
    actionTypes: Record<string, any>;
    actions: {
        updateName: (name?: string) => ({
            type: \\"update name (logic)\\";
            payload: { name: string; };
        });
        withDefaultValue: (name?: any) => ({
            type: \\"with default value (logic)\\";
            payload: { name: string; };
        });
        withDefaultValueAndType: (name?: string) => ({
            type: \\"with default value and type (logic)\\";
            payload: { name: string; };
        });
        withBool: () => ({
            type: \\"with bool (logic)\\";
            payload: {
                value: boolean;
            };
        });
        withRandomPayload: () => ({
            type: \\"with random payload (logic)\\";
            payload: {
                value: { bla: number; };
            };
        });
    };
    cache: Record<string, any>;
    connections: any;
    constants: any;
    defaults: any;
    events: any;
    path: [\\"logic\\"];
    pathString: \\"logic\\";
    propTypes: any;
    props: Record<string, any>;
    reducer: (state: any, action: () => any, fullState: any) => {};
    reducerOptions: any;
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    values: {};
    _isKea: true;
}"
`;

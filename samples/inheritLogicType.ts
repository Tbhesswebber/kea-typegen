// Generated by kea-typegen on Sun, 30 May 2021 21:01:59 GMT. DO NOT EDIT THIS FILE MANUALLY.

import { Logic } from 'kea'

export interface baseLogicType<Repository> extends Logic {
    actionCreators: {
        setUsername: (
            username: string,
        ) => {
            type: 'set username (inheritLogic)'
            payload: {
                username: string
            }
        }
        setOtherUsername: (
            username: string,
        ) => {
            type: 'set other username (inheritLogic)'
            payload: {
                username: string
            }
        }
    }
    actionKeys: {
        'set username (inheritLogic)': 'setUsername'
        'set other username (inheritLogic)': 'setOtherUsername'
    }
    actionTypes: {
        setUsername: 'set username (inheritLogic)'
        setOtherUsername: 'set other username (inheritLogic)'
    }
    actions: {
        setUsername: (username: string) => void
        setOtherUsername: (username: string) => void
    }
    constants: {}
    defaults: {
        username: string
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['inheritLogic']
    pathString: 'inheritLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: () => any,
        fullState: any,
    ) => {
        username: string
    }
    reducerOptions: {}
    reducers: {
        username: (state: string, action: any, fullState: any) => string
    }
    selector: (
        state: any,
    ) => {
        username: string
    }
    selectors: {
        username: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        username: string
    }
    _isKea: true
    _isKeaWithKey: false
}


export interface inheritingLogicType extends Logic {
    actionCreators: {
        setOtherUsername: (
            username: number,
        ) => {
            type: 'set other username (inheritLogic)'
            payload: {
                username: string
            }
        }
        setFinalName: (
            username: string,
        ) => {
            type: 'set final name (inheritLogic)'
            payload: {
                username: string
            }
        }
    }
    actionKeys: {
        'set other username (inheritLogic)': 'setOtherUsername'
        'set final name (inheritLogic)': 'setFinalName'
    }
    actionTypes: {
        setOtherUsername: 'set other username (inheritLogic)'
        setFinalName: 'set final name (inheritLogic)'
    }
    actions: {
        setOtherUsername: (username: number) => void
        setFinalName: (username: string) => void
    }
    constants: {}
    defaults: {
        username: string
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['inheritLogic']
    pathString: 'inheritLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: () => any,
        fullState: any,
    ) => {
        username: string
    }
    reducerOptions: {}
    reducers: {
        username: (state: string, action: any, fullState: any) => string
    }
    selector: (
        state: any,
    ) => {
        username: string
    }
    selectors: {
        username: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        username: string
    }
    _isKea: true
    _isKeaWithKey: false
}
